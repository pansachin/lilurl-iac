name: "Plan & Apply"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  plan:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ vars.IDF_PROVIDER }}
          service_account: ${{ vars.CI_SERVICE_ACCOUNT}}
          audience: ${{ vars.WORKLOAD_IDF_AUDIENCE}}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
        env:
          TF_VAR_project_id: ${{ vars.TF_VAR_PROJECT_ID }}
          TF_VAR_region: ${{ vars.TF_VAR_REGION }}
          TF_VAR_zone: ${{ vars.TF_VAR_ZONE }}
          TF_VAR_bucket_name: ${{ vars.TF_VAR_BUCKET_NAME }}

      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  apply:
    runs-on: ubuntu-20.04
    needs: plan
    environment: "apply"
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ vars.IDF_PROVIDER }}
          service_account: ${{ vars.CI_SERVICE_ACCOUNT}}
          audience: ${{ vars.WORKLOAD_IDF_AUDIENCE}}

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -no-color >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform apply
        if: github.event == 'push'
        run: terraform apply -auto-aprove
        env:
          TF_VAR_project_id: ${{ vars.TF_VAR_PROJECT_ID }}
          TF_VAR_region: ${{ vars.TF_VAR_REGION }}
          TF_VAR_zone: ${{ vars.TF_VAR_ZONE }}
          TF_VAR_bucket_name: ${{ vars.TF_VAR_BUCKET_NAME }}